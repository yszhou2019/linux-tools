// usage of g++

g++ -E [srcfile].cpp -o src.ii // preprocess
g++ -S [srcfile].cpp -o src.asm // only compile to assembly language, without linkage
g++ -c [srcfile].cpp -o src.o // only compile to object code, without linkage
g++ -o [target] first.o second.o libthird.o // linkage, link several object files to target executable

// link option
// https://gcc.gnu.org/onlinedocs/gcc/Link-Options.html
// -static option
If both static and shared libraries are found, the linker gives preference to linking with the shared library unless the -static option is used.
It makes a difference where in the command you write this option; the linker searches and processes libraries and object files in the order they are specified. Thus, ‘foo.o -lz bar.o’ searches library ‘z’ after file foo.o but before bar.o. If bar.o refers to functions in ‘z’, those functions may not be loaded.
// -shared option
// -static
On systems that support dynamic linking, this overrides -pie and prevents linking with the shared libraries. On other systems, this option has no effect.
// -shared
Produce a shared object which can then be linked with other objects to form an executable. Not all systems support this option. For predictable results, you must also specify the same set of options used for compilation (-fpic, -fPIC, or model suboptions) when you specify this linker option.1

// code generation option
// https://gcc.gnu.org/onlinedocs/gcc/Code-Gen-Options.html#Code-Gen-Options
// -fpic
Generate position-independent code **(PIC) suitable for use in a shared library**, if supported for the target machine. Such code accesses all constant addresses through a global offset table (GOT). The dynamic loader resolves the GOT entries when the program starts (the dynamic loader is not part of GCC; it is part of the operating system). If the GOT size for the linked executable exceeds a machine-specific maximum size, you get an error message from the linker indicating that -fpic does not work; in that case, recompile with -fPIC instead. (These maximums are 8k on the SPARC, 28k on AArch64 and 32k on the m68k and RS/6000. The x86 has no such limit.)
Position-independent code requires special support, and therefore works only on certain machines. For the x86, GCC supports PIC for System V but not for the Sun 386i. Code generated for the IBM RS/6000 is always position-independent.
When this flag is set, the macros __pic__ and __PIC__ are defined to 1.
// -fPIC
If supported for the target machine, emit position-independent code, suitable for dynamic linking and avoiding any limit on the size of the global offset table. This option makes a difference on AArch64, m68k, PowerPC and SPARC.
Position-independent code requires special support, and therefore works only on certain machines.
When this flag is set, the macros __pic__ and __PIC__ are defined to 2.

// usage of ldconfig
// this binary is used when adding new so to /etc/ld.so.conf.d
// https://unix.stackexchange.com/a/279698
// https://man7.org/linux/man-pages/man8/ldconfig.8.html

// usage of ar
ar rc libtools.a foo.o bar.o // create static library, with object files
ar x libtools.a // extract all the object files from the archive
ar t libtools.a // show the included object file names
// create static library from shared objects
// with object file and shared library
// to append static library with object files: extract [ar x] + [ar rc]
// https://stackoverflow.com/questions/3821916/how-to-merge-two-ar-static-libraries-into-one

// set LD_LIBRARY_PATH before running with a [.so] library